import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
import random

# Dark Mode Colors with Neon Effects
BG_COLOR = "#0D0D0D"  # Almost Black Background
TEXT_COLOR = "#39FF14"  # Neon Green
BUTTON_COLOR = "#00FFFF"  # Cyan
ENTRY_BG = "#222222"  # Darker Gray for Input
HIGHLIGHT_COLOR = "#FF00FF"  # Neon Magenta

# Global Variables
user_data = {}
expense_data = {"Food": 0, "Shopping": 0, "Rent": 0, "Travel": 0}
savings = 0
reward_points = 0
previous_month_expenses = {category: random.randint(500, 5000) for category in expense_data}


# Function to create full-screen windows
def create_fullscreen_window(title):
    window = tk.Toplevel(root)
    window.title(title)
    window.configure(bg=BG_COLOR)
    window.attributes('-fullscreen', True)  # Full screen mode

    # Exit & Minimize Buttons
    exit_button = tk.Button(window, text="‚ùå Exit", command=root.quit, bg="red", fg="white", font=("Arial", 12, "bold"))
    exit_button.pack(side="top", anchor="ne", padx=10, pady=10)

    minimize_button = tk.Button(window, text="üîΩ Minimize", command=lambda: window.attributes('-fullscreen', False),
                                bg=BUTTON_COLOR, fg=BG_COLOR, font=("Arial", 12, "bold"))
    minimize_button.pack(side="top", anchor="ne", padx=10)

    return window


# Function to handle user input
def ask_details():
    def save_details():
        global user_data
        name = name_entry.get()
        age = int(age_entry.get())
        gender = gender_var.get()
        mobile = mobile_entry.get()

        if len(mobile) != 10 or not mobile.isdigit():
            messagebox.showerror("Error", "‚ùå Please enter a valid 10-digit mobile number.")
            return

        user_data = {"Name": name, "Age": age, "Gender": gender, "Mobile": mobile}

        if age < 18:
            messagebox.showinfo("Hey Kiddo!", f"üéà Hello {name}! Let's set up your pocket money tracker!")
            ask_parent_details()  # Open separate window for parent details
        else:
            occupation = occupation_var.get()
            user_data["Occupation"] = occupation

            if occupation == "Student":
                messagebox.showinfo("Yay!", "üéì You get a special student discount on savings!")
            else:
                income = int(income_entry.get())
                user_data["Income"] = income

        ask_expenses()

    details_window = create_fullscreen_window("Enter Your Details")

    def create_label(text):
        return tk.Label(details_window, text=text, bg=BG_COLOR, fg=TEXT_COLOR, font=("Arial", 12, "bold"))

    create_label("Your Mobile Number:").pack()
    mobile_entry = ttk.Entry(details_window)
    mobile_entry.pack()

    create_label("Your Name:").pack()
    name_entry = ttk.Entry(details_window)
    name_entry.pack()

    create_label("Your Gender:").pack()
    gender_var = tk.StringVar(details_window)
    gender_var.set("Select")
    gender_menu = ttk.Combobox(details_window, textvariable=gender_var, values=["Male", "Female", "Transgender"])
    gender_menu.pack()

    create_label("Your Age:").pack()
    age_entry = ttk.Entry(details_window)
    age_entry.pack()

    occupation_var = tk.StringVar(details_window)
    income_entry = None

    create_label("Your Occupation:").pack()
    occupation_menu = ttk.Combobox(details_window, textvariable=occupation_var, values=["Student", "Other"],
                                   state="readonly")
    occupation_menu.pack()

    submit_button = tk.Button(details_window, text="Submit", command=save_details, bg=BUTTON_COLOR, fg=BG_COLOR,
                              font=("Arial", 12, "bold"))
    submit_button.pack(pady=10)


# Function to handle parent details if user is under 18
def ask_parent_details():
    def save_parent_details():
        parent_number = parent_number_entry.get()
        parent_upi = parent_upi_entry.get()

        if len(parent_number) != 10 or not parent_number.isdigit():
            messagebox.showerror("Error", " Please enter a valid 10-digit parent mobile number.")
            return

        user_data["Parent Mobile"] = parent_number
        user_data["Parent UPI"] = parent_upi
        messagebox.showinfo("Great!", " Now your parents can send you pocket money easily!")

        ask_expenses()

    parent_window = create_fullscreen_window("Parent Details")

    def create_label(text):
        return tk.Label(parent_window, text=text, bg=BG_COLOR, fg=TEXT_COLOR, font=("Arial", 12, "bold"))

    create_label("Parent Mobile Number:").pack()
    parent_number_entry = ttk.Entry(parent_window)
    parent_number_entry.pack()

    create_label("Parent UPI ID:").pack()
    parent_upi_entry = ttk.Entry(parent_window)
    parent_upi_entry.pack()

    submit_button = tk.Button(parent_window, text="Submit", command=save_parent_details, bg=BUTTON_COLOR, fg=BG_COLOR,
                              font=("Arial", 12, "bold"))
    submit_button.pack(pady=10)


# Function to log expenses
def ask_expenses():
    def save_expenses():
        global expense_data, savings, reward_points

        for category, entry in expense_entries.items():
            amount = entry.get()
            if amount.isdigit():
                expense_data[category] += int(amount)

        savings_amount = savings_entry.get()
        if savings_amount.isdigit():
            savings += int(savings_amount)
            reward_points += (savings // 100) * 10  # 10 points for every ‚Çπ100 saved

        messagebox.showinfo("Saved!", "‚úÖ Your expenses have been recorded!")

        if reward_points >= 100:
            messagebox.showinfo("Congrats!", f"üéâ You've earned {reward_points} points! Enjoy a discount coupon!")

        visualize_expenses()

    expense_window = create_fullscreen_window("Track Your Expenses")

    expense_entries = {}
    for category in expense_data:
        tk.Label(expense_window, text=f"{category} Expense:", bg=BG_COLOR, fg=TEXT_COLOR).pack()
        entry = ttk.Entry(expense_window)
        entry.pack()
        expense_entries[category] = entry

    tk.Label(expense_window, text="Savings This Month:", bg=BG_COLOR, fg=TEXT_COLOR).pack()
    savings_entry = ttk.Entry(expense_window)
    savings_entry.pack()

    submit_button = tk.Button(expense_window, text="Submit", command=save_expenses, bg=BUTTON_COLOR, fg=BG_COLOR,
                              font=("Arial", 12, "bold"))
    submit_button.pack(pady=10)


# Main Tkinter App
root = tk.Tk()
root.title("Smart Expense Tracker")
root.configure(bg=BG_COLOR)
root.attributes('-fullscreen', True)

tk.Label(root, text="üí∞ Welcome to Smart Expense Tracker! üéâ", font=("Arial", 16, "bold"), bg=BG_COLOR,
         fg=TEXT_COLOR).pack(pady=20)
tk.Button(root, text="Start Tracking", command=ask_details, bg=BUTTON_COLOR, fg=BG_COLOR, font=("Arial", 14, "bold"),
          padx=20, pady=10).pack(pady=20)

exit_button = tk.Button(root, text="‚ùå Exit", command=root.quit, bg="red", fg="white", font=("Arial", 12, "bold"))
exit_button.pack(side="bottom", pady=10)

root.mainloop()
